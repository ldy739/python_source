//查看所有进程
show processlist;
//查询是否锁表
show OPEN TABLES where In_use > 0;
//查看被锁住的
SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS;
//等待锁定
SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS;
//杀死进程
kill 12041
 show global status;
1.查看数据连接情况
-- 查看数据库最大连接数
show variables like 'max_connections';
-- 查看用户已使用连接数
show global status like 'Max_used_connections';
/*
示例:出现错误信息MySQL: ERROR 1040: Too many connections
一种是访问量确实很高，MySQL服务器抗不住，这个时候就要考虑增加从服务器分散读压力，
另外一种情况是MySQL配置文件中max_connections值过小
注：比较理想的设置是：
Max_used_connections / max_connections * 100% ≈ 85%
最大连接数占上限连接数的85%左右，如果发现比例在10%以下，MySQL服务器连接数上限设置的过高了
*/
2.数据索引内存命中情况
-- innodb
show variables like 'innodb_buffer_pool_size';
show global status like 'Innodb_buffer_pool_read%';
-- MyISAM
show variables like 'key_buffer_size';
show global status like 'key_read%';
/*
计算索引未命中缓存的概率：key_cache_miss_rate = Key_reads / Key_read_requests * 100%
计算索引命中缓存的概率:命中率=(请求数-磁盘读取)/请求数*100
如果key_cache_miss_rate在0.01%以下的话，key_buffer_size分配的过多，可以适当减少,设置的过大会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率。*/

3.数据库缓存簇情况
-- 查看数据库缓存簇(blocks)数使用情况
show global status like 'key_blocks_u%';
/*
Key_blocks_unused表示未使用的缓存簇(blocks)数，Key_blocks_used表示曾经用到的最大的blocks数，比如这台服务器，所有的缓存都用到了，要么增加key_buffer_size，要么就是过渡索引了，把缓存占满了。比较理想的设置：
Key_blocks_used / (Key_blocks_unused + Key_blocks_used) * 100% ≈ 80%
*/
4.临时表情况
-- 查看数据库对临时表的配置只有256MB以下的临时表才能全部放内存，超过的就会用到硬盘临时表。
show variables where Variable_name in ('tmp_table_size', 'max_heap_table_size');
-- 查看数据库创建临时文件情况
show global status like 'created_tmp%';
/*
每次创建临时表，Created_tmp_tables增加，如果是在磁盘上创建临时表，Created_tmp_disk_tables也增加,Created_tmp_files表示MySQL服务创建的临时文件文件数，
比较理想的配置是：
Created_tmp_disk_tables / Created_tmp_tables * 100% <= 25%
*/
5.Open Table情况
show global status like 'open%tables%';
show variables like 'table_open_cache';
/*比较合适的值为：
Open_tables表示打开表的数量，Opened_tables表示打开过的表数量，如果Opened_tables数量过大，说明配置中table_cache(5.1.3之后这个值叫做table_open_cache)值可能太小，我们查询一下服务器table_cache
Open_tables / Opened_tables * 100% >= 85%
Open_tables / table_cache * 100% <= 95%
*/
6.查看数据库进程使用情况
show global status like 'Thread%';
show variables like 'thread_cache_size';
/*
 如果我们在MySQL服务器配置文件中设置了thread_cache_size，当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁(前提是缓存数未达上限)。
Threads_created表示创建过的线程数，如果发现Threads_created值过大的话，表明MySQL服务器一直在创建线程，这也是比较耗资源，可以适当增加配置文件中thread_cache_size值，查询服务器thread_cache_size配置
mysql是通过线程缓存来完成线程重用的。客户端发起连接时，首先会去线程缓冲池里找是不是有空闲的线程。如果没有才会去新建线程。当一个连接断开的时候，并不会马上销毁线程释放资源。而是暂时把线程放在缓冲池中挂起。
所以这里就涉及到了三个参数，一个是treads_cached这个是缓冲池中的线程个数。还有一个是treads_connected这个是连接中的线程数。第三个Threads_created它的含义是已经创建的线程数。
在并发数低的情况下，一般Threads_created参数是treads_cached和treads_connected参数之和。当并发数高的情况下，Threads_created就会暴增，这个时候就需要考虑thread_cache_size来设置缓冲池的大小了
*/
7.查询缓存(query cache)
show global status like 'qcache%';
-- 对缓存中碎片进行整理
FLUSH QUERY CACHE
/*
MySQL查询缓存变量解释：
　　Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE会对缓存中的碎片进行整理，从而得到一个空闲块。
　　Qcache_free_memory：缓存中的空闲内存。
　　Qcache_hits：每次查询在缓存中命中时就增大
　　Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。
　　Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看;如果这个数字在不断增长，就表示可能碎片非常严重，或者内存很少。(上面的 free_blocks和free_memory可以告诉您属于哪种情况)
　　Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了now()之类的函数。
　　Qcache_queries_in_cache：当前缓存的查询(和响应)的数量。
　　Qcache_total_blocks：缓存中块的数量
*/
8.排序使用情况
show global status like 'sort%';
/*
Sort_merge_passes 包括两步。MySQL 首先会尝试在内存中做排序，使用的内存大小由系统变量 Sort_buffer_size 决定，如果它的大小不够把所有的记录都读到内存中，MySQL 就会把每次在内存中排序的结果存到临时文件中，
等 MySQL 找到所有记录之后，再把临时文件中的记录做一次排序。这再次排序就会增加 Sort_merge_passes。实际上，MySQL 会用另一个临时文件来存再次排序的结果，所以通常会看到 Sort_merge_passes 增加的数值是建临时文件数的两倍。因为用到了临时文件，所以速度可能会比较慢，增加 Sort_buffer_size 会减少 Sort_merge_passes 和 创建临时文件的次数。但盲目的增加 Sort_buffer_size 并不一定能提高速度，见 How fast can you sort data with MySQL?(引自http://qroom.blogspot.com/2007/09/mysql-select-sort.html，貌似被墙) mysql
另外，增加read_rnd_buffer_size(3.2.3是record_rnd_buffer_size)的值对排序的操作也有一点的好处，参见：http://www.mysqlperformanceblog.com/2007/07/24/what-exactly-is-read_rnd_buffer_size/
*/
9.文件打开数(open_files)
-- 查看当前打开文件数
show global status like 'open_files';
-- 查看数据库配置打开参数
show variables like 'open_files_limit';
/*
比较合适的设置：Open_files / open_files_limit * 100% <= 75%
*/
10.表锁情况
show global status like 'table_locks%';
/*
Table_locks_immediate表示立即释放表锁数，Table_locks_waited表示需要等待的表锁数，
如果Table_locks_immediate / Table_locks_waited > 5000，最好采用InnoDB引擎，因为InnoDB是行锁而MyISAM是表锁，对于高并发写入的应用InnoDB效果会好些。
*/
11.表扫描情况
show global status like 'handler_read%';
-- 调出服务器完成的查询请求次数
show global status like 'com_select';
/*
Handler_read_first：一条索引中的第一个条目被读取的次数，通常是指完全索引扫描（例如，假定indexed_col被索引，语句SELECT indexed_col from tablename导致了一个完全索引扫描）
Handler_read_key：当读取一行数据时，使用索引的请求的个数。如果查询时使用了索引，就希望这个值快速增加
Handler_read_last/Handler_read_next：按照索引顺序读取下一行数据的请求的个数。如果使用了完全索引进行扫描，或者在一个不变的范围内查询一个索引，则这个值就会增加在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。”
Handler_read_prev：按照索引的顺序读取前面一行数据的请求的个数。这个变量值由SELECT fieldlist ORDER BY fields DESC类型的语句使用
Handler_read_rnd：查询直接操作了数据文件，很多时候表现为没有使用索引或者文件排序
Handler_read_rnd_next：这个说明跟你的SQL语句有很大的关系，你可以通过explain工具或者是慢查询日志找出对应的慢SQL，并对执行慢的SQL语句进行调试，直到找到最优的执行计划，这样Handler_read_rnd_next的值就会往下降了。
 计算表扫描率：
　　表扫描率 = Handler_read_rnd_next / Com_select
　　如果表扫描率超过4000，说明进行了太多表扫描，很有可能索引没有建好，增加read_buffer_size值会有一些好处，但最好不要超过8MB。
*/
12.其他
show processlist;看一下时间长的sql，主要是update，insert，delete等
SHOW [统计范围] STATUS [LIKE '状态项名称']
-- 统计范围关键字分为GLOBAL和SESSION(或LOCAL)两种。
在show status的完整语法中，"[]"中的部分是可选的，如果我们的show status语句中不包含统计范围关键字，则默认统计范围为SESSION，也就是只统计当前连接的状态信息。如果我们需要查询自当前MySQL启动后所有连接执行的SELECT语句总数，我们可以执行如下语句：
show global status like 'com_select';

以上即是show status的详细用法。由于show status的状态统计项较多，我们就不再一一解释每个统计项的具体含义，在这里，我们仅列出部分常用的状态信息查看语句：


-- 查看MySQL本次启动后的运行时间(单位：秒)

show status like 'uptime';



-- 查看select语句的执行数

show [global] status like 'com_select';



-- 查看insert语句的执行数

show [global] status like 'com_insert';



-- 查看update语句的执行数

show [global] status like 'com_update';



-- 查看delete语句的执行数

show [global] status like 'com_delete';



-- 查看试图连接到MySQL(不管是否连接成功)的连接数

show status like 'connections';



-- 查看线程缓存内的线程的数量。

show status like 'threads_cached';



-- 查看当前打开的连接的数量。

show status like 'threads_connected';



-- 查看当前打开的连接的数量。

show status like 'threads_connected';



-- 查看创建用来处理连接的线程数。如果Threads_created较大，你可能要增加thread_cache_size值。

show status like 'threads_created';



-- 查看激活的(非睡眠状态)线程数。

show status like 'threads_running';





-- 查看立即获得的表的锁的次数。

show status like 'table_locks_immediate';



-- 查看不能立即获得的表的锁的次数。如果该值较高，并且有性能问题，你应首先优化查询，然后拆分表或使用复制。

show status like 'table_locks_waited';



-- 查看创建时间超过slow_launch_time秒的线程数。

show status like 'slow_launch_threads';



-- 查看查询时间超过long_query_time秒的查询的个数。

show status like 'slow_queries';



